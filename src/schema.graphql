type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  giuId: String
  phone: String
  gender: Boolean!
  isAdmin: Boolean!
  isEmailVerified: Boolean!
  isDeleted: Boolean!
  activated: Boolean!
  isDriver: Boolean!
  createdAt: String!
  updatedAt: String!
  driver: Driver
}

type Driver {
  id: ID!
  userId: ID!
  approved: Boolean!
  car: CarDetails
}

type CarDetails {
  id: ID!
  licensePlate: String!
  year: Int!
  vehicleName: String!
  passengerSeats: Int!
  licensePicture: String
  driverId: ID
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Message {
  message: String!
}

scalar Upload

input RegisterInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  giuId: String
  phone: String
  gender: Boolean!
  isDriver: Boolean!
  carDetails: CarDetailsInput
}

input LoginInput {
  email: String!
  password: String!
}

input VerificationInput {
  email: String!
  code: String!
}

input CarDetailsInput {
  licensePlate: String!
  year: Int!
  vehicleName: String!
  passengerSeats: Int!
  licensePicture: String
}

type Query {
  me: User!
  myDriverCar: CarDetails
  downloadLicense: LicenseFile!
  validateToken(token: String!): User!
  validateRefreshToken(token: String!): Boolean!
  isAdmin(token: String!): Boolean!
  isDriver(token: String!): Boolean!
  pendingDrivers: [User!]!
  getDriverById(id: ID!): User!
}

type LicenseFile {
  fileContent: String!
  filename: String!
  mimeType: String!
}

type Mutation {
  register(input: RegisterInput!): Message!
  verifyRegistration(input: VerificationInput!): AuthResponse!
  login(input: LoginInput!): Message!
  verifyLogin(input: VerificationInput!): AuthResponse!
  refreshToken(token: String!): AuthResponse!
  revokeToken(token: String!): Boolean!
  validateAccessToken(input: TokenInput!): Boolean!
  addDriverCar(input: CarDetailsInput!): CarDetails!
  updateDriverCar(input: CarDetailsInput!): CarDetails!
  deleteDriverCar: Boolean!
  uploadLicense(file: Upload!): CarDetails!
  activateDriver(userId: ID!): Driver!
  deleteUser: Message!
}

input TokenInput {
  token: String!
} 