generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email            String    @unique
  password         String
  firstName        String
  lastName         String
  giuId            String?
  phone            String?
  gender           Boolean
  isAdmin          Boolean   @default(false)
  isEmailVerified  Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  activated        Boolean   @default(false)
  verificationCodes VerificationCode[]
  refreshTokens    RefreshToken[]
  car              Car?
  drivers          Driver?
  tokens           UserToken[]
}

model UserToken {
  id        Int      @id @default(autoincrement())
  hash      String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiry    DateTime
  scope     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Driver {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int    @unique
  car      CarDetails?  @relation("DriverCar")
  carId     Int?
  approved  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarDetails {
  id              Int    @id @default(autoincrement())
  licensePlate    String @unique
  year            Int
  vehicleName     String
  passengerSeats  Int
  licensePicture  String?
  driver   Driver?  @relation("DriverCar", fields: [driverId], references: [id])
  driverId Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  code      String
  userId    Int
  email     String
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([userId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  revoked   Boolean  @default(false)

  @@index([userId])
  @@index([token])
}

model Car {
  id          Int      @id @default(autoincrement())
  make        String
  model       String
  year        Int
  color       String
  licensePlate String  @unique
  seats       Int
  userId      Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

